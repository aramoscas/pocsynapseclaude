import React, { useState, useEffect } from 'react';
import { 
  Activity, 
  Server, 
  Zap, 
  BarChart3, 
  Settings, 
  Globe, 
  Cpu, 
  HardDrive,
  Network,
  Database,
  Router,
  GitBranch,
  Clock,
  Users,
  TrendingUp,
  CheckCircle,
  AlertCircle,
  XCircle,
  Play,
  Pause,
  Monitor,
  Apple,
  Gamepad2,
  Send,
  Eye,
  ArrowUp,
  ArrowDown,
  Layers,
  Shield
} from 'lucide-react';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';

// Composant Dashboard Principal
const SynapseGridDashboard = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [realTimeData, setRealTimeData] = useState({
    totalNodes: 1247,
    activeJobs: 89,
    avgLatency: 342,
    throughput: 1543,
    systemLoad: 67,
    networkTraffic: 2.4,
    lastUpdate: new Date()
  });

  // Simulation des données temps réel
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeData(prev => ({
        ...prev,
        activeJobs: Math.max(0, prev.activeJobs + Math.floor(Math.random() * 10 - 4)),
        avgLatency: Math.max(100, prev.avgLatency + Math.floor(Math.random() * 40 - 20)),
        throughput: Math.max(1000, prev.throughput + Math.floor(Math.random() * 200 - 100)),
        systemLoad: Math.max(0, Math.min(100, prev.systemLoad + Math.floor(Math.random() * 10 - 5))),
        networkTraffic: Math.max(0.1, prev.networkTraffic + (Math.random() * 0.4 - 0.2)),
        lastUpdate: new Date()
      }));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  // Données pour les graphiques
  const hourlyJobsData = [
    { time: '00:00', jobs: 45, completed: 42 },
    { time: '04:00', jobs: 23, completed: 21 },
    { time: '08:00', jobs: 167, completed: 159 },
    { time: '12:00', jobs: 234, completed: 221 },
    { time: '16:00', jobs: 289, completed: 267 },
    { time: '20:00', jobs: 178, completed: 165 }
  ];

  const nodeDistributionData = [
    { type: 'Mac M2', count: 342, color: '#06b6d4' },
    { type: 'RTX 4090', count: 198, color: '#8b5cf6' },
    { type: 'RTX 3080', count: 267, color: '#10b981' },
    { type: 'A100', count: 89, color: '#f59e0b' },
    { type: 'Autres', count: 351, color: '#64748b' }
  ];

  const performanceComparisonData = [
    { metric: 'Vitesse', mac: 85, docker: 65 },
    { metric: 'Efficacité', mac: 92, docker: 73 },
    { metric: 'Coût', mac: 78, docker: 45 },
    { metric: 'Stabilité', mac: 88, docker: 82 }
  ];

  // Données pour la page Architecture
  const architectureComponents = [
    { 
      id: 'gateway', 
      name: 'Gateway', 
      load: 45, 
      traffic: 1247, 
      status: 'healthy',
      connections: 3
      x: 20, 
      y: 20 
    },
    { 
      id: 'redis', 
      name: 'Redis Cache', 
      load: 72, 
      traffic: 892, 
      status: 'healthy',
      connections: 4,
      x: 50, 
      y: 40 
    },
    { 
      id: 'dispatcher', 
      name: 'Dispatcher', 
      load: 58, 
      traffic: 634, 
      status: 'warning',
      connections: 5,
      x: 80, 
      y: 20 
    },
    { 
      id: 'postgres', 
      name: 'PostgreSQL', 
      load: 34, 
      traffic: 456, 
      status: 'healthy',
      connections: 2,
      x: 20, 
      y: 70 
    },
    { 
      id: 'aggregator', 
      name: 'Aggregator', 
      load: 67, 
      traffic: 789, 
      status: 'healthy',
      connections: 3
      x: 80, 
      y: 70 
    },
    { 
      id: 'nginx', 
      name: 'Nginx LB', 
      load: 23, 
      traffic: 1456, 
      status: 'healthy',
      connections: 6,
      x: 50, 
      y: 10 
    }
  ];

  // Navigation principale
  const navigation = [
    { id: 'dashboard', name: 'Dashboard', icon: Activity },
    { id: 'nodes', name: 'Nodes', icon: Server },
    { id: 'jobs', name: 'Jobs', icon: Zap },
    { id: 'analytics', name: 'Analytics', icon: BarChart3 },
    { id: 'architecture', name: 'Architecture', icon: GitBranch },
    { id: 'settings', name: 'Settings', icon: Settings }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      {/* Header */}
      <header className="bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Globe className="h-8 w-8 text-cyan-400" />
                <h1 className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
                  SynapseGrid
                </h1>
              </div>
              <span className="px-3 py-1 text-xs bg-green-500/20 text-green-400 rounded-full border border-green-500/30">
                v1.0 Live
              </span>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2 text-sm text-slate-300">
                <Clock className="h-4 w-4" />
                <span>{realTimeData.lastUpdate.toLocaleTimeString()}</span>
              </div>
              <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className="w-64 bg-slate-800/30 backdrop-blur-xl border-r border-slate-700/50 min-h-screen">
          <nav className="p-4">
            <ul className="space-y-2">
              {navigation.map((item) => (
                <li key={item.id}>
                  <button
                    onClick={() => setActiveTab(item.id)}
                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 ${
                      activeTab === item.id
                        ? 'bg-gradient-to-r from-cyan-500/20 to-purple-500/20 text-white border border-cyan-500/30'
                        : 'text-slate-300 hover:bg-slate-700/50 hover:text-white'
                    }`}
                  >
                    <item.icon className="h-5 w-5" />
                    <span className="font-medium">{item.name}</span>
                  </button>
                </li>
              ))}
            </ul>
          </nav>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6">
          {/* Dashboard Page */}
          {activeTab === 'dashboard' && (
            <DashboardPage realTimeData={realTimeData} hourlyJobsData={hourlyJobsData} nodeDistributionData={nodeDistributionData} performanceComparisonData={performanceComparisonData} />
          )}

          {/* Nodes Page */}
          {activeTab === 'nodes' && (
            <NodesPage />
          )}

          {/* Jobs Page */}
          {activeTab === 'jobs' && (
            <JobsPage />
          )}

          {/* Analytics Page */}
          {activeTab === 'analytics' && (
            <AnalyticsPage />
          )}

          {/* Architecture Page */}
          {activeTab === 'architecture' && (
            <ArchitecturePage components={architectureComponents} realTimeData={realTimeData} />
          )}

          {/* Settings Page */}
          {activeTab === 'settings' && (
            <SettingsPage />
          )}
        </main>
      </div>
    </div>
  );
};

// Page Dashboard
const DashboardPage = ({ realTimeData, hourlyJobsData, nodeDistributionData, performanceComparisonData }) => (
  <div className="space-y-6">
    <div className="flex justify-between items-center">
      <h2 className="text-3xl font-bold text-white">Dashboard</h2>
      <div className="flex items-center space-x-2 text-sm text-slate-400">
        <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
        <span>Mise à jour en temps réel</span>
      </div>
    </div>

    {/* Métriques principales */}
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <MetricCard
        title="Nœuds Totaux"
        value={realTimeData.totalNodes.toLocaleString()}
        change="+12"
        icon={Server}
        color="from-blue-500 to-cyan-500"
      />
      <MetricCard
        title="Jobs Actifs"
        value={realTimeData.activeJobs}
        change="-3"
        icon={Zap}
        color="from-purple-500 to-pink-500"
      />
      <MetricCard
        title="Latence Moy."
        value={`${realTimeData.avgLatency}ms`}
        change="-23ms"
        icon={Activity}
        color="from-green-500 to-emerald-500"
      />
      <MetricCard
        title="Throughput"
        value={`${realTimeData.throughput}/s`}
        change="+156"
        icon={TrendingUp}
        color="from-orange-500 to-red-500"
      />
    </div>

    {/* Graphiques */}
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
        <h3 className="text-xl font-semibold text-white mb-4">Jobs par Heure</h3>
        <ResponsiveContainer width="100%" height={300}>
          <AreaChart data={hourlyJobsData}>
            <defs>
              <linearGradient id="jobsGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#06b6d4" stopOpacity={0.8}/>
                <stop offset="95%" stopColor="#06b6d4" stopOpacity={0.1}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
            <XAxis dataKey="time" stroke="#94a3b8" />
            <YAxis stroke="#94a3b8" />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: '#1e293b', 
                border: '1px solid #334155',
                borderRadius: '8px'
              }} 
            />
            <Area type="monotone" dataKey="jobs" stroke="#06b6d4" fillOpacity={1} fill="url(#jobsGradient)" />
            <Area type="monotone" dataKey="completed" stroke="#10b981" fillOpacity={0.3} fill="#10b981" />
          </AreaChart>
        </ResponsiveContainer>
      </div>

      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
        <h3 className="text-xl font-semibold text-white mb-4">Distribution des Nœuds</h3>
        <ResponsiveContainer width="100%" height={300}>
          <PieChart>
            <Pie
              data={nodeDistributionData}
              cx="50%"
              cy="50%"
              outerRadius={80}
              fill="#8884d8"
              dataKey="count"
              label
            >
              {nodeDistributionData.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <Tooltip 
              contentStyle={{ 
                backgroundColor: '#1e293b', 
                border: '1px solid #334155',
                borderRadius: '8px'
              }} 
            />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </div>
    </div>

    {/* Comparaison Performance */}
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <h3 className="text-xl font-semibold text-white mb-4">Performance Mac M2 vs Docker</h3>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={performanceComparisonData}>
          <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
          <XAxis dataKey="metric" stroke="#94a3b8" />
          <YAxis stroke="#94a3b8" />
          <Tooltip 
            contentStyle={{ 
              backgroundColor: '#1e293b', 
              border: '1px solid #334155',
              borderRadius: '8px'
            }} 
          />
          <Legend />
          <Bar dataKey="mac" fill="#06b6d4" name="Mac M2" />
          <Bar dataKey="docker" fill="#8b5cf6" name="Docker" />
        </BarChart>
      </ResponsiveContainer>
    </div>

    {/* Activité Récente */}
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <h3 className="text-xl font-semibold text-white mb-4">Activité Récente</h3>
      <div className="space-y-3">
        {[
          { time: '14:23', action: 'Nouveau nœud Mac M2 connecté', status: 'success' },
          { time: '14:18', action: 'Job #1847 complété en 234ms', status: 'success' },
          { time: '14:15', action: 'Dispatcher redémarré automatiquement', status: 'warning' },
          { time: '14:12', action: 'Réseau optimisé: +15% throughput', status: 'success' },
          { time: '14:08', action: 'Sauvegarde automatique effectuée', status: 'info' }
        ].map((activity, index) => (
          <div key={index} className="flex items-center space-x-3 p-3 rounded-lg bg-slate-700/30">
            <div className={`w-2 h-2 rounded-full ${
              activity.status === 'success' ? 'bg-green-400' :
              activity.status === 'warning' ? 'bg-yellow-400' : 'bg-blue-400'
            }`}></div>
            <span className="text-sm text-slate-400">{activity.time}</span>
            <span className="text-slate-200 flex-1">{activity.action}</span>
          </div>
        ))}
      </div>
    </div>
  </div>
);

// Page Nodes
const NodesPage = () => {
  const nodes = [
    { id: 'node-001', name: 'MacBook-Pro-M2', type: 'Mac M2', status: 'active', performance: 92, lastSeen: '2s', location: 'Paris, FR' },
    { id: 'node-002', name: 'Gaming-Rig-RTX4090', type: 'RTX 4090', status: 'active', performance: 88, lastSeen: '1s', location: 'Berlin, DE' },
    { id: 'node-003', name: 'Server-Farm-A100', type: 'A100', status: 'busy', performance: 95, lastSeen: '3s', location: 'London, UK' },
    { id: 'node-004', name: 'Home-Setup-RTX3080', type: 'RTX 3080', status: 'idle', performance: 74, lastSeen: '5s', location: 'Madrid, ES' },
    { id: 'node-005', name: 'Mac-Studio-M2', type: 'Mac M2', status: 'active', performance: 89, lastSeen: '2s', location: 'Amsterdam, NL' }
  ];

  return (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-white">Nœuds du Réseau</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Nœuds Actifs</p>
              <p className="text-2xl font-bold text-green-400">1,247</p>
            </div>
            <CheckCircle className="h-8 w-8 text-green-400" />
          </div>
        </div>
        
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Performance Moy.</p>
              <p className="text-2xl font-bold text-cyan-400">87.6%</p>
            </div>
            <TrendingUp className="h-8 w-8 text-cyan-400" />
          </div>
        </div>
        
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Mac M2 Natifs</p>
              <p className="text-2xl font-bold text-purple-400">342</p>
            </div>
            <Apple className="h-8 w-8 text-purple-400" />
          </div>
        </div>
      </div>

      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 overflow-hidden">
        <div className="p-6 border-b border-slate-700/50">
          <h3 className="text-xl font-semibold text-white">Grille des Nœuds</h3>
        </div>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-slate-700/30">
              <tr>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Nœud</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Type</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Performance</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Last Seen</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Location</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-700/50">
              {nodes.map((node) => (
                <tr key={node.id} className="hover:bg-slate-700/20 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-3">
                      <div className="w-3 h-3 bg-green-400 rounded-full"></div>
                      <span className="text-white font-medium">{node.name}</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                      node.type.includes('Mac') ? 'bg-purple-500/20 text-purple-400 border border-purple-500/30' :
                      'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                    }`}>
                      {node.type.includes('Mac') ? <Apple className="w-3 h-3 mr-1" /> : <Gamepad2 className="w-3 h-3 mr-1" />}
                      {node.type}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                      node.status === 'active' ? 'bg-green-500/20 text-green-400' :
                      node.status === 'busy' ? 'bg-yellow-500/20 text-yellow-400' :
                      'bg-slate-500/20 text-slate-400'
                    }`}>
                      {node.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-2">
                      <div className="flex-1 bg-slate-700 rounded-full h-2">
                        <div 
                          className="bg-gradient-to-r from-cyan-500 to-purple-500 h-2 rounded-full" 
                          style={{ width: `${node.performance}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-slate-300">{node.performance}%</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-400">{node.lastSeen}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-400">{node.location}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// Page Jobs
const JobsPage = () => {
  const [jobs, setJobs] = useState([
    { id: '1847', model: 'resnet50', type: 'Docker', status: 'completed', duration: '234ms', node: 'node-002', timestamp: '14:18:23' },
    { id: '1848', model: 'gpt-3.5', type: 'Mac M2', status: 'running', duration: '1.2s', node: 'node-001', timestamp: '14:19:45' },
    { id: '1849', model: 'stable-diffusion', type: 'Docker', status: 'queued', duration: '-', node: '-', timestamp: '14:20:12' },
    { id: '1850', model: 'bert-base', type: 'Mac M2', status: 'completed', duration: '456ms', node: 'node-005', timestamp: '14:21:03' }
  ]);

  const submitJob = (type) => {
    const models = ['resnet50', 'gpt-3.5', 'stable-diffusion', 'bert-base', 'yolo-v8'];
    const newJob = {
      id: String(Date.now()),
      model: models[Math.floor(Math.random() * models.length)],
      type: type,
      status: 'queued',
      duration: '-',
      node: '-',
      timestamp: new Date().toLocaleTimeString()
    };
    setJobs([newJob, ...jobs]);
  };

  return (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-white">Gestion des Jobs</h2>
      
      {/* Soumission de Jobs */}
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
        <h3 className="text-xl font-semibold text-white mb-4">Soumettre un Job</h3>
        <div className="flex space-x-4">
          <button
            onClick={() => submitJob('Docker')}
            className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg hover:from-blue-600 hover:to-cyan-600 transition-all duration-200 transform hover:scale-105"
          >
            <Gamepad2 className="h-5 w-5" />
            <span>Job Docker</span>
          </button>
          <button
            onClick={() => submitJob('Mac M2')}
            className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-200 transform hover:scale-105"
          >
            <Apple className="h-5 w-5" />
            <span>Job Mac M2</span>
          </button>
        </div>
      </div>

      {/* Table des Jobs */}
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 overflow-hidden">
        <div className="p-6 border-b border-slate-700/50">
          <h3 className="text-xl font-semibold text-white">Historique des Jobs</h3>
        </div>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-slate-700/30">
              <tr>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Job ID</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Modèle</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Type</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Durée</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Nœud</th>
                <th className="px-6 py-4 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">Timestamp</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-700/50">
              {jobs.map((job) => (
                <tr key={job.id} className="hover:bg-slate-700/20 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap text-white font-mono">#{job.id}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-slate-300">{job.model}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                      job.type.includes('Mac') ? 'bg-purple-500/20 text-purple-400' : 'bg-blue-500/20 text-blue-400'
                    }`}>
                      {job.type.includes('Mac') ? <Apple className="w-3 h-3 mr-1" /> : <Gamepad2 className="w-3 h-3 mr-1" />}
                      {job.type}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                      job.status === 'completed' ? 'bg-green-500/20 text-green-400' :
                      job.status === 'running' ? 'bg-yellow-500/20 text-yellow-400' :
                      'bg-slate-500/20 text-slate-400'
                    }`}>
                      {job.status === 'completed' ? <CheckCircle className="w-3 h-3 mr-1" /> :
                       job.status === 'running' ? <Play className="w-3 h-3 mr-1" /> :
                       <Pause className="w-3 h-3 mr-1" />}
                      {job.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-slate-300 font-mono">{job.duration}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-slate-400">{job.node}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-slate-400">{job.timestamp}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// Page Analytics
const AnalyticsPage = () => {
  const revenueData = [
    { month: 'Jan', revenue: 12000, efficiency: 72 },
    { month: 'Feb', revenue: 18000, efficiency: 78 },
    { month: 'Mar', revenue: 25000, efficiency: 85 },
    { month: 'Apr', revenue: 32000, efficiency: 89 },
    { month: 'Mai', revenue: 45000, efficiency: 92 },
    { month: 'Jun', revenue: 58000, efficiency: 94 }
  ];

  const geographicData = [
    { region: 'Europe', jobs: 45, color: '#06b6d4' },
    { region: 'Amérique du Nord', jobs: 32, color: '#8b5cf6' },
    { region: 'Asie', jobs: 18, color: '#10b981' },
    { region: 'Autres', jobs: 5, color: '#f59e0b' }
  ];

  return (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-white">Analytics Business</h2>
      
      {/* Métriques Business */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-white">Revenus Mensuels</h3>
            <TrendingUp className="h-6 w-6 text-green-400" />
          </div>
          <div className="text-3xl font-bold text-green-400 mb-2">$58,000</div>
          <div className="text-sm text-slate-400">+28% ce mois</div>
        </div>
        
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-white">Efficacité Réseau</h3>
            <Activity className="h-6 w-6 text-cyan-400" />
          </div>
          <div className="text-3xl font-bold text-cyan-400 mb-2">94%</div>
          <div className="text-sm text-slate-400">+6% amélioration</div>
        </div>
        
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-white">Économies Mac M2</h3>
            <Apple className="h-6 w-6 text-purple-400" />
          </div>
          <div className="text-3xl font-bold text-purple-400 mb-2">75%</div>
          <div className="text-sm text-slate-400">vs infrastructure classique</div>
        </div>
      </div>

      {/* Graphiques Analytics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <h3 className="text-xl font-semibold text-white mb-4">Évolution des Revenus</h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={revenueData}>
              <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
              <XAxis dataKey="month" stroke="#94a3b8" />
              <YAxis stroke="#94a3b8" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1e293b', 
                  border: '1px solid #334155',
                  borderRadius: '8px'
                }} 
              />
              <Line type="monotone" dataKey="revenue" stroke="#10b981" strokeWidth={3} />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
          <h3 className="text-xl font-semibold text-white mb-4">Distribution Géographique</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={geographicData}
                cx="50%"
                cy="50%"
                outerRadius={80}
                fill="#8884d8"
                dataKey="jobs"
                label
              >
                {geographicData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1e293b', 
                  border: '1px solid #334155',
                  borderRadius: '8px'
                }} 
              />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Insights */}
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
        <h3 className="text-xl font-semibold text-white mb-4">Insights Économiques</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="flex items-center space-x-3 p-4 bg-green-500/10 rounded-lg border border-green-500/20">
              <ArrowUp className="h-5 w-5 text-green-400" />
              <div>
                <p className="text-green-400 font-medium">Économie d'énergie Mac M2</p>
                <p className="text-sm text-slate-400">75% moins de consommation vs GPU traditionnels</p>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-4 bg-cyan-500/10 rounded-lg border border-cyan-500/20">
              <TrendingUp className="h-5 w-5 text-cyan-400" />
              <div>
                <p className="text-cyan-400 font-medium">Croissance du réseau</p>
                <p className="text-sm text-slate-400">+156% nouveaux nœuds ce trimestre</p>
              </div>
            </div>
          </div>
          <div className="space-y-4">
            <div className="flex items-center space-x-3 p-4 bg-purple-500/10 rounded-lg border border-purple-500/20">
              <Globe className="h-5 w-5 text-purple-400" />
              <div>
                <p className="text-purple-400 font-medium">Expansion géographique</p>
                <p className="text-sm text-slate-400">Couverture de 42 pays en Q2 2025</p>
              </div>
            </div>
            <div className="flex items-center space-x-3 p-4 bg-orange-500/10 rounded-lg border border-orange-500/20">
              <Zap className="h-5 w-5 text-orange-400" />
              <div>
                <p className="text-orange-400 font-medium">Performance optimisée</p>
                <p className="text-sm text-slate-400">Latence réduite de 40% avec Mac M2</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Page Architecture (nouvelle)
const ArchitecturePage = ({ components, realTimeData }) => {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold text-white">Architecture Système</h2>
        <div className="flex items-center space-x-2 text-sm text-slate-400">
          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
          <span>Mise à jour temps réel</span>
        </div>
      </div>

      {/* Vue d'ensemble du système */}
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
        <h3 className="text-xl font-semibold text-white mb-6">Diagramme de Flux de Données</h3>
        
        {/* Diagramme interactif */}
        <div className="relative h-96 bg-slate-900/50 rounded-lg border border-slate-700/30 overflow-hidden">
          {/* Connexions entre composants */}
          <svg className="absolute inset-0 w-full h-full">
            <defs>
              <marker id="arrowhead" markerWidth="10" markerHeight="7" 
               refX="0" refY="3.5" orient="auto">
                <polygon points="0 0, 10 3.5, 0 7" fill="#06b6d4" />
              </marker>
            </defs>
            {/* Lignes de connexion avec animation */}
            <line x1="20%" y1="30%" x2="50%" y2="20%" stroke="#06b6d4" strokeWidth="2" markerEnd="url(#arrowhead)" className="animate-pulse" />
            <line x1="50%" y1="30%" x2="80%" y2="30%" stroke="#06b6d4" strokeWidth="2" markerEnd="url(#arrowhead)" className="animate-pulse" />
            <line x1="50%" y1="50%" x2="80%" y2="80%" stroke="#06b6d4" strokeWidth="2" markerEnd="url(#arrowhead)" className="animate-pulse" />
            <line x1="20%" y1="80%" x2="50%" y2="50%" stroke="#06b6d4" strokeWidth="2" markerEnd="url(#arrowhead)" className="animate-pulse" />
          </svg>

          {/* Composants du système */}
          {components.map((component) => (
            <div
              key={component.id}
              className="absolute transform -translate-x-1/2 -translate-y-1/2 group cursor-pointer"
              style={{ left: `${component.x}%`, top: `${component.y}%` }}
            >
              <div className="relative">
                {/* Cercle principal du composant */}
                <div className={`w-20 h-20 rounded-full border-2 flex items-center justify-center transition-all duration-300 group-hover:scale-110 ${
                  component.status === 'healthy' ? 'bg-green-500/20 border-green-500/50' :
                  component.status === 'warning' ? 'bg-yellow-500/20 border-yellow-500/50' :
                  'bg-red-500/20 border-red-500/50'
                }`}>
                  {component.id === 'gateway' && <Router className="h-8 w-8 text-green-400" />}
                  {component.id === 'redis' && <Database className="h-8 w-8 text-red-400" />}
                  {component.id === 'dispatcher' && <GitBranch className="h-8 w-8 text-yellow-400" />}
                  {component.id === 'postgres' && <HardDrive className="h-8 w-8 text-blue-400" />}
                  {component.id === 'aggregator' && <Layers className="h-8 w-8 text-purple-400" />}
                  {component.id === 'nginx' && <Shield className="h-8 w-8 text-cyan-400" />}
                </div>

                {/* Tooltip avec métriques */}
                <div className="absolute top-full mt-2 left-1/2 transform -translate-x-1/2 bg-slate-800 border border-slate-600 rounded-lg p-3 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10 min-w-48">
                  <h4 className="font-semibold text-white text-sm mb-2">{component.name}</h4>
                  <div className="space-y-1 text-xs">
                    <div className="flex justify-between">
                      <span className="text-slate-400">Charge:</span>
                      <span className="text-white">{component.load}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-slate-400">Trafic:</span>
                      <span className="text-white">{component.traffic} req/s</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-slate-400">Connexions:</span>
                      <span className="text-white">{component.connections}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-slate-400">Statut:</span>
                      <span className={component.status === 'healthy' ? 'text-green-400' : 'text-yellow-400'}>
                        {component.status}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Indicateur de charge */}
                <div className="absolute -bottom-1 -right-1 w-6 h-6 bg-slate-800 rounded-full border border-slate-600 flex items-center justify-center">
                  <div className={`w-3 h-3 rounded-full ${
                    component.load < 50 ? 'bg-green-400' :
                    component.load < 80 ? 'bg-yellow-400' : 'bg-red-400'
                  }`}></div>
                </div>
              </div>

              {/* Nom du composant */}
              <div className="text-center mt-2">
                <p className="text-xs text-slate-300 font-medium">{component.name}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Métriques temps réel des composants */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {components.map((component) => (
          <div key={component.id} className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">{component.name}</h3>
              <div className={`w-3 h-3 rounded-full ${
                component.status === 'healthy' ? 'bg-green-400' :
                component.status === 'warning' ? 'bg-yellow-400' : 'bg-red-400'
              }`}></div>
            </div>
            
            {/* Barre de charge */}
            <div className="mb-4">
              <div className="flex justify-between text-sm mb-2">
                <span className="text-slate-400">Charge CPU</span>
                <span className="text-white">{component.load}%</span>
              </div>
              <div className="w-full bg-slate-700 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full transition-all duration-500 ${
                    component.load < 50 ? 'bg-green-400' :
                    component.load < 80 ? 'bg-yellow-400' : 'bg-red-400'
                  }`}
                  style={{ width: `${component.load}%` }}
                ></div>
              </div>
            </div>

            {/* Métriques */}
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-slate-400">Trafic:</span>
                <span className="text-white font-mono">{component.traffic} req/s</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-400">Connexions:</span>
                <span className="text-white font-mono">{component.connections}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-slate-400">Latence:</span>
                <span className="text-white font-mono">{Math.floor(Math.random() * 50 + 10)}ms</span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Statistiques globales du flux */}
      <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
        <h3 className="text-xl font-semibold text-white mb-4">Métriques de Performance Globales</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          <div className="text-center">
            <p className="text-2xl font-bold text-cyan-400">{realTimeData.throughput}</p>
            <p className="text-sm text-slate-400">Jobs/seconde</p>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold text-green-400">{realTimeData.avgLatency}ms</p>
            <p className="text-sm text-slate-400">Latence moyenne</p>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold text-purple-400">{realTimeData.systemLoad}%</p>
            <p className="text-sm text-slate-400">Charge système</p>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold text-orange-400">{realTimeData.networkTraffic.toFixed(1)}GB/s</p>
            <p className="text-sm text-slate-400">Trafic réseau</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Page Settings
const SettingsPage = () => (
  <div className="space-y-6">
    <h2 className="text-3xl font-bold text-white">Paramètres</h2>
    
    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <h3 className="text-xl font-semibold text-white mb-4">Configuration Réseau</h3>
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">Région Préférée</label>
          <select className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white">
            <option>Europe de l'Ouest</option>
            <option>Amérique du Nord</option>
            <option>Asie-Pacifique</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium text-slate-300 mb-2">Latence Maximum (ms)</label>
          <input type="number" defaultValue="500" className="w-full bg-slate-700 border border-slate-600 rounded-lg px-3 py-2 text-white" />
        </div>
      </div>
    </div>

    <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6">
      <h3 className="text-xl font-semibold text-white mb-4">Notifications</h3>
      <div className="space-y-4">
        <label className="flex items-center space-x-3">
          <input type="checkbox" defaultChecked className="rounded bg-slate-700 border-slate-600" />
          <span className="text-slate-300">Alertes de performance</span>
        </label>
        <label className="flex items-center space-x-3">
          <input type="checkbox" defaultChecked className="rounded bg-slate-700 border-slate-600" />
          <span className="text-slate-300">Nouveaux nœuds</span>
        </label>
        <label className="flex items-center space-x-3">
          <input type="checkbox" className="rounded bg-slate-700 border-slate-600" />
          <span className="text-slate-300">Rapports hebdomadaires</span>
        </label>
      </div>
    </div>
  </div>
);

// Composant MetricCard réutilisable
const MetricCard = ({ title, value, change, icon: Icon, color }) => (
  <div className="bg-slate-800/50 backdrop-blur-xl rounded-xl border border-slate-700/50 p-6 group hover:scale-105 transition-all duration-300">
    <div className="flex items-center justify-between">
      <div>
        <p className="text-slate-400 text-sm font-medium">{title}</p>
        <p className="text-2xl font-bold text-white mt-1">{value}</p>
        <p className={`text-sm mt-1 ${change.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
          {change.startsWith('+') ? '↗' : '↘'} {change}
        </p>
      </div>
      <div className={`p-3 rounded-xl bg-gradient-to-r ${color} bg-opacity-20 group-hover:bg-opacity-30 transition-all duration-300`}>
        <Icon className="h-6 w-6 text-white" />
      </div>
    </div>
  </div>
);

export default SynapseGridDashboard;
