#!/bin/bash

# üçé Syst√®me de contr√¥le pour Mac M2 natif SynapseGrid
# G√®re le d√©marrage, arr√™t et monitoring du n≈ìud Mac M2

set -e

echo "üçé SynapseGrid Mac M2 Native Controller"
echo "======================================"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
mac_log() { echo -e "${PURPLE}[MAC M2]${NC} $1"; }

# Configuration
MAC_SERVICE_DIR="services/mac-native"
MAC_NODE_SCRIPT="$MAC_SERVICE_DIR/mac_node.py"
MAC_PID_FILE="/tmp/synapse_mac_node.pid"
MAC_LOG_FILE="mac_node.log"
NODE_PORT=8084

# Fonctions utilitaires
check_mac_silicon() {
    if [[ "$OSTYPE" != "darwin"* ]]; then
        error "Ce contr√¥leur est destin√© aux machines macOS uniquement"
        return 1
    fi
    
    local arch=$(uname -m)
    if [[ "$arch" == "arm64" ]]; then
        success "Apple Silicon d√©tect√© (M1/M2/M3) ‚úì"
        return 0
    else
        warn "Intel Mac d√©tect√© - Performance limit√©e"
        return 0
    fi
}

check_dependencies() {
    log "V√©rification des d√©pendances Mac M2..."
    
    # Python 3
    if ! command -v python3 >/dev/null 2>&1; then
        error "Python 3 requis. Installez avec: brew install python3"
        return 1
    fi
    
    # Pip packages
    local packages=("psutil" "requests" "numpy")
    for package in "${packages[@]}"; do
        if ! python3 -c "import $package" 2>/dev/null; then
            warn "Package $package manquant. Installation..."
            pip3 install "$package" || {
                error "√âchec installation $package"
                return 1
            }
        fi
    done
    
    success "D√©pendances OK ‚úì"
}

create_mac_node_service() {
    log "Cr√©ation du service Mac M2 natif..."
    
    mkdir -p "$MAC_SERVICE_DIR"
    
    cat > "$MAC_NODE_SCRIPT" << 'MAC_SERVICE_EOF'
#!/usr/bin/env python3
"""
SynapseGrid Mac M2 Native Node
Service natif optimis√© pour Apple Silicon avec Metal Performance Shaders
"""

import asyncio
import json
import time
import psutil
import requests
import subprocess
import threading
import signal
import sys
from datetime import datetime
from pathlib import Path

# Configuration
NODE_ID = f"mac-m2-native-{int(time.time())}"
NODE_TYPE = "Mac M2 Native"
GATEWAY_URL = "http://localhost:8080"
NODE_PORT = 8084
UPDATE_INTERVAL = 10
LOG_FILE = "mac_node.log"

class MacM2Node:
    def __init__(self):
        self.node_id = NODE_ID
        self.node_type = NODE_TYPE
        self.status = "starting"
        self.performance_score = 95  # Mac M2 score √©lev√©
        self.jobs_completed = 0
        self.jobs_active = 0
        self.start_time = time.time()
        self.running = True
        self.last_heartbeat = time.time()
        
        # Setup logging
        self.setup_logging()
        
        # Handle shutdown gracefully
        signal.signal(signal.SIGINT, self.shutdown)
        signal.signal(signal.SIGTERM, self.shutdown)
        
    def setup_logging(self):
        """Configure le logging"""
        import logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(LOG_FILE),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def get_system_metrics(self):
        """R√©cup√®re les m√©triques syst√®me Mac M2"""
        try:
            # CPU Apple Silicon
            cpu_percent = psutil.cpu_percent(interval=0.1)
            cpu_count = psutil.cpu_count(logical=False)
            
            # M√©moire
            memory = psutil.virtual_memory()
            
            # Performance Metal (simulation bas√©e sur charge)
            metal_performance = self.calculate_metal_performance(cpu_percent)
            
            # Temp√©rature approximative
            temp = self.get_estimated_temperature(cpu_percent)
            
            # Efficacit√© √©nerg√©tique (avantage Mac M2)
            energy_efficiency = self.calculate_energy_efficiency(cpu_percent)
            
            return {
                "node_id": self.node_id,
                "node_type": self.node_type,
                "status": self.status,
                "cpu_cores": cpu_count,
                "cpu_usage": round(cpu_percent, 1),
                "memory_total_gb": round(memory.total / (1024**3), 1),
                "memory_used_gb": round(memory.used / (1024**3), 1),
                "memory_percent": round(memory.percent, 1),
                "temperature_c": temp,
                "metal_performance": metal_performance,
                "energy_efficiency": energy_efficiency,
                "performance_score": self.performance_score,
                "jobs_completed": self.jobs_completed,
                "jobs_active": self.jobs_active,
                "uptime_hours": round((time.time() - self.start_time) / 3600, 2),
                "last_seen": datetime.now().isoformat()
            }
        except Exception as e:
            self.logger.error(f"Erreur m√©triques syst√®me: {e}")
            return {}
    
    def calculate_metal_performance(self, cpu_usage):
        """Calcule la performance Metal MPS"""
        # Mac M2 excelle avec Metal - performance inverse de la charge
        base_performance = 95
        load_penalty = cpu_usage * 0.3
        return max(70, base_performance - load_penalty)
    
    def get_estimated_temperature(self, cpu_usage):
        """Estime la temp√©rature bas√©e sur la charge"""
        # Mac M2 reste relativement cool
        base_temp = 35
        load_temp = cpu_usage * 0.4
        return round(base_temp + load_temp, 1)
    
    def calculate_energy_efficiency(self, cpu_usage):
        """Calcule l'efficacit√© √©nerg√©tique (avantage Mac M2)"""
        # Mac M2 tr√®s efficace m√™me sous charge
        if cpu_usage < 30:
            return 95
        elif cpu_usage < 60:
            return 88
        else:
            return 75
    
    def register_with_gateway(self):
        """S'enregistre aupr√®s du Gateway"""
        try:
            metrics = self.get_system_metrics()
            response = requests.post(
                f"{GATEWAY_URL}/nodes/register",
                json=metrics,
                timeout=5,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                self.status = "active"
                self.logger.info(f"N≈ìud Mac M2 enregistr√©: {self.node_id}")
                return True
            else:
                self.logger.warning(f"√âchec enregistrement: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            self.logger.warning(f"Gateway non disponible: {e}")
            self.status = "disconnected"
            return False
    
    def send_heartbeat(self):
        """Envoie un heartbeat au Gateway"""
        try:
            metrics = self.get_system_metrics()
            response = requests.post(
                f"{GATEWAY_URL}/nodes/heartbeat",
                json=metrics,
                timeout=3
            )
            
            if response.status_code == 200:
                self.last_heartbeat = time.time()
                self.status = "active"
                return True
            else:
                self.logger.warning(f"Heartbeat √©chou√©: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException:
            self.status = "disconnected"
            return False
    
    def simulate_job_processing(self):
        """Simule le traitement de jobs IA"""
        if self.jobs_active > 0:
            # Simule la compl√©tion de jobs
            if time.time() % 15 < 1:  # Toutes les 15 secondes
                completed = min(self.jobs_active, 2)
                self.jobs_active -= completed
                self.jobs_completed += completed
                self.logger.info(f"Jobs compl√©t√©s: {completed} (Total: {self.jobs_completed})")
        
        # Simule l'arriv√©e de nouveaux jobs
        if time.time() % 20 < 1 and self.jobs_active < 5:
            new_jobs = 1 if self.status == "active" else 0
            self.jobs_active += new_jobs
            if new_jobs > 0:
                self.logger.info(f"Nouveau job re√ßu (Actifs: {self.jobs_active})")
    
    def run_status_server(self):
        """Lance un serveur HTTP simple pour le status"""
        from http.server import HTTPServer, BaseHTTPRequestHandler
        import threading
        
        class StatusHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                if self.path == '/status':
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    
                    status_data = {
                        "node_id": self.server.node.node_id,
                        "status": self.server.node.status,
                        "performance": self.server.node.performance_score,
                        "jobs_completed": self.server.node.jobs_completed,
                        "uptime": time.time() - self.server.node.start_time
                    }
                    
                    self.wfile.write(json.dumps(status_data, indent=2).encode())
                else:
                    self.send_response(404)
                    self.end_headers()
            
            def log_message(self, format, *args):
                pass  # Disable default logging
        
        try:
            server = HTTPServer(('localhost', NODE_PORT), StatusHandler)
            server.node = self
            server_thread = threading.Thread(target=server.serve_forever, daemon=True)
            server_thread.start()
            self.logger.info(f"Status server d√©marr√© sur http://localhost:{NODE_PORT}/status")
        except Exception as e:
            self.logger.warning(f"Impossible de d√©marrer le serveur status: {e}")
    
    def run(self):
        """Boucle principale du n≈ìud"""
        self.logger.info(f"üçé D√©marrage du n≈ìud Mac M2 natif: {self.node_id}")
        
        # D√©marrer le serveur de status
        self.run_status_server()
        
        # Tentative d'enregistrement initial
        self.register_with_gateway()
        
        # Boucle principale
        while self.running:
            try:
                # Heartbeat p√©riodique
                self.send_heartbeat()
                
                # Simulation de traitement
                self.simulate_job_processing()
                
                # Log p√©riodique
                if int(time.time()) % 60 == 0:  # Toutes les minutes
                    metrics = self.get_system_metrics()
                    self.logger.info(f"üìä CPU: {metrics.get('cpu_usage', 0)}% | "
                                   f"M√©m: {metrics.get('memory_percent', 0)}% | "
                                   f"Jobs: {self.jobs_completed} | "
                                   f"Temp: {metrics.get('temperature_c', 0)}¬∞C")
                
                time.sleep(UPDATE_INTERVAL)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                self.logger.error(f"Erreur dans la boucle principale: {e}")
                time.sleep(5)
        
        self.shutdown()
    
    def shutdown(self, signum=None, frame=None):
        """Arr√™t propre du n≈ìud"""
        if self.running:
            self.logger.info("üõë Arr√™t du n≈ìud Mac M2 natif...")
            self.running = False
            self.status = "stopping"
            
            # D√©senregistrement du Gateway
            try:
                requests.post(
                    f"{GATEWAY_URL}/nodes/unregister",
                    json={"node_id": self.node_id},
                    timeout=3
                )
            except:
                pass
            
            self.logger.info("‚úÖ N≈ìud Mac M2 arr√™t√© proprement")
            sys.exit(0)

if __name__ == "__main__":
    node = MacM2Node()
    node.run()
MAC_SERVICE_EOF

    chmod +x "$MAC_NODE_SCRIPT"
    success "Service Mac M2 cr√©√© ‚úì"
}

start_mac_node() {
    mac_log "D√©marrage du n≈ìud Mac M2 natif..."
    
    if is_mac_running; then
        warn "Le n≈ìud Mac M2 est d√©j√† en cours d'ex√©cution"
        return 0
    fi
    
    if [ ! -f "$MAC_NODE_SCRIPT" ]; then
        log "Service Mac M2 non trouv√©, cr√©ation..."
        create_mac_node_service
    fi
    
    # D√©marrer en arri√®re-plan
    nohup python3 "$MAC_NODE_SCRIPT" > "$MAC_LOG_FILE" 2>&1 &
    local pid=$!
    echo $pid > "$MAC_PID_FILE"
    
    # Attendre le d√©marrage
    sleep 3
    
    if is_mac_running; then
        success "N≈ìud Mac M2 d√©marr√© (PID: $pid)"
        success "Status: http://localhost:$NODE_PORT/status"
        success "Logs: tail -f $MAC_LOG_FILE"
        return 0
    else
        error "√âchec du d√©marrage du n≈ìud Mac M2"
        return 1
    fi
}

stop_mac_node() {
    mac_log "Arr√™t du n≈ìud Mac M2 natif..."
    
    if [ -f "$MAC_PID_FILE" ]; then
        local pid=$(cat "$MAC_PID_FILE")
        if kill "$pid" 2>/dev/null; then
            success "N≈ìud Mac M2 arr√™t√© (PID: $pid)"
        else
            warn "Processus $pid non trouv√©"
        fi
        rm -f "$MAC_PID_FILE"
    fi
    
    # Forcer l'arr√™t si n√©cessaire
    pkill -f "mac_node.py" 2>/dev/null || true
    
    success "N≈ìud Mac M2 arr√™t√© ‚úì"
}

restart_mac_node() {
    mac_log "Red√©marrage du n≈ìud Mac M2..."
    stop_mac_node
    sleep 2
    start_mac_node
}

is_mac_running() {
    if [ -f "$MAC_PID_FILE" ]; then
        local pid=$(cat "$MAC_PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

status_mac_node() {
    echo ""
    mac_log "Status du n≈ìud Mac M2 natif:"
    echo "=========================="
    
    if is_mac_running; then
        local pid=$(cat "$MAC_PID_FILE")
        success "‚úÖ N≈ìud Mac M2 actif (PID: $pid)"
        
        # Status HTTP
        if curl -s "http://localhost:$NODE_PORT/status" >/dev/null 2>&1; then
            success "‚úÖ Status API disponible: http://localhost:$NODE_PORT/status"
            echo ""
            log "M√©triques temps r√©el:"
            curl -s "http://localhost:$NODE_PORT/status" | python3 -m json.tool
        else
            warn "‚ö†Ô∏è  Status API non disponible"
        fi
        
        # M√©triques syst√®me
        echo ""
        log "M√©triques syst√®me Mac M2:"
        echo "CPU: $(sysctl -n machdep.cpu.brand_string)"
        echo "M√©moire: $(( $(sysctl -n hw.memsize) / 1024 / 1024 / 1024 ))GB"
        echo "Architecture: $(uname -m)"
        
    else
        error "‚ùå N≈ìud Mac M2 non actif"
    fi
    
    echo ""
    log "Commandes disponibles:"
    echo "  $0 start     # D√©marrer le n≈ìud"
    echo "  $0 stop      # Arr√™ter le n≈ìud"
    echo "  $0 restart   # Red√©marrer le n≈ìud"
    echo "  $0 status    # Voir le status"
    echo "  $0 logs      # Voir les logs"
    echo "  $0 install   # Installer les d√©pendances"
}

show_logs() {
    if [ -f "$MAC_LOG_FILE" ]; then
        log "Logs du n≈ìud Mac M2 (Ctrl+C pour quitter):"
        tail -f "$MAC_LOG_FILE"
    else
        warn "Aucun log trouv√©. Le n≈ìud a-t-il √©t√© d√©marr√© ?"
    fi
}

install_dependencies() {
    log "Installation des d√©pendances Mac M2..."
    
    # Homebrew check
    if ! command -v brew >/dev/null 2>&1; then
        log "Installation de Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Python packages
    pip3 install psutil requests numpy --user
    
    success "D√©pendances install√©es ‚úì"
}

# Interface en ligne de commande
case "${1:-help}" in
    "start")
        check_mac_silicon
        check_dependencies
        start_mac_node
        ;;
    "stop")
        stop_mac_node
        ;;
    "restart")
        check_mac_silicon
        restart_mac_node
        ;;
    "status")
        status_mac_node
        ;;
    "logs")
        show_logs
        ;;
    "install")
        install_dependencies
        ;;
    "help"|"-h"|"--help")
        cat << 'HELP_EOF'
üçé SynapseGrid Mac M2 Native Controller

USAGE:
  ./mac_m2_control.sh [COMMAND]

COMMANDS:
  start     D√©marrer le n≈ìud Mac M2 natif
  stop      Arr√™ter le n≈ìud Mac M2 natif  
  restart   Red√©marrer le n≈ìud Mac M2 natif
  status    Afficher le status et m√©triques
  logs      Voir les logs en temps r√©el
  install   Installer les d√©pendances
  help      Afficher cette aide

EXAMPLES:
  ./mac_m2_control.sh start     # D√©marrer le n≈ìud
  ./mac_m2_control.sh status    # Voir le status
  ./mac_m2_control.sh logs      # Voir les logs

Le n≈ìud Mac M2 utilise Metal Performance Shaders pour
une performance native optimale sur Apple Silicon.

Status API: http://localhost:8084/status
HELP_EOF
        ;;
    *)
        error "Commande inconnue: $1"
        echo "Utilisez '$0 help' pour voir les commandes disponibles"
        exit 1
        ;;
esac

wait_for_gateway() {
    log "Attente du Gateway..."
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "http://localhost:8080/health" >/dev/null 2>&1; then
            success "Gateway disponible ‚úì"
            return 0
        fi
        
        warn "Gateway non disponible, tentative $attempt/$max_attempts..."
        sleep 2
        ((attempt++))
    done
    
    error "Gateway non disponible apr√®s $max_attempts tentatives"
    return 1
}

# Update start function to wait for gateway
start_mac_node() {
    mac_log "D√©marrage du n≈ìud Mac M2 natif..."
    
    if is_mac_running; then
        warn "N≈ìud Mac M2 d√©j√† actif"
        return 0
    fi
    
    check_dependencies || return 1
    
    # Wait for gateway to be ready
    wait_for_gateway || {
        error "Impossible de d√©marrer sans Gateway"
        return 1
    }
    
    # Create service if needed
    if [ ! -f "$MAC_NODE_SCRIPT" ]; then
        log "Service Mac M2 non trouv√©, cr√©ation..."
        create_mac_node_service
    fi
    
    # Start in background
    nohup python3 "$MAC_NODE_SCRIPT" > "$MAC_LOG_FILE" 2>&1 &
    local pid=$!
    echo $pid > "$MAC_PID_FILE"
    
    # Wait for startup
    sleep 3
    
    if is_mac_running; then
        success "N≈ìud Mac M2 d√©marr√© (PID: $pid)"
        success "Status: http://localhost:$NODE_PORT/status"
        success "Logs: tail -f $MAC_LOG_FILE"
        return 0
    else
        error "√âchec du d√©marrage du n≈ìud Mac M2"
        return 1
    fi
}
